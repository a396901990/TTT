package com.example.deanguo.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.example.deanguo.greendao.Route;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ROUTE.
*/
public class RouteDao extends AbstractDao<Route, Long> {

    public static final String TABLENAME = "ROUTE";

    /**
     * Properties of entity Route.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Route = new Property(1, String.class, "route", false, "ROUTE");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Day = new Property(3, String.class, "day", false, "DAY");
        public final static Property Start = new Property(4, String.class, "start", false, "START");
        public final static Property End = new Property(5, String.class, "end", false, "END");
        public final static Property Distance = new Property(6, String.class, "distance", false, "DISTANCE");
        public final static Property Type = new Property(7, String.class, "type", false, "TYPE");
        public final static Property Describe = new Property(8, String.class, "describe", false, "DESCRIBE");
        public final static Property Detail = new Property(9, String.class, "detail", false, "DETAIL");
        public final static Property Pic_url = new Property(10, String.class, "pic_url", false, "PIC_URL");
        public final static Property Rank_hard = new Property(11, String.class, "rank_hard", false, "RANK_HARD");
        public final static Property Rank_view = new Property(12, String.class, "rank_view", false, "RANK_VIEW");
        public final static Property Rank_road = new Property(13, String.class, "rank_road", false, "RANK_ROAD");
    };


    public RouteDao(DaoConfig config) {
        super(config);
    }
    
    public RouteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ROUTE' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'ROUTE' TEXT NOT NULL ," + // 1: route
                "'NAME' TEXT NOT NULL ," + // 2: name
                "'DAY' TEXT NOT NULL ," + // 3: day
                "'START' TEXT NOT NULL ," + // 4: start
                "'END' TEXT NOT NULL ," + // 5: end
                "'DISTANCE' TEXT NOT NULL ," + // 6: distance
                "'TYPE' TEXT NOT NULL ," + // 7: type
                "'DESCRIBE' TEXT NOT NULL ," + // 8: describe
                "'DETAIL' TEXT NOT NULL ," + // 9: detail
                "'PIC_URL' TEXT NOT NULL ," + // 10: pic_url
                "'RANK_HARD' TEXT NOT NULL ," + // 11: rank_hard
                "'RANK_VIEW' TEXT NOT NULL ," + // 12: rank_view
                "'RANK_ROAD' TEXT NOT NULL );"); // 13: rank_road
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ROUTE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Route entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getRoute());
        stmt.bindString(3, entity.getName());
        stmt.bindString(4, entity.getDay());
        stmt.bindString(5, entity.getStart());
        stmt.bindString(6, entity.getEnd());
        stmt.bindString(7, entity.getDistance());
        stmt.bindString(8, entity.getType());
        stmt.bindString(9, entity.getDescribe());
        stmt.bindString(10, entity.getDetail());
        stmt.bindString(11, entity.getPic_url());
        stmt.bindString(12, entity.getRank_hard());
        stmt.bindString(13, entity.getRank_view());
        stmt.bindString(14, entity.getRank_road());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Route readEntity(Cursor cursor, int offset) {
        Route entity = new Route( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // route
            cursor.getString(offset + 2), // name
            cursor.getString(offset + 3), // day
            cursor.getString(offset + 4), // start
            cursor.getString(offset + 5), // end
            cursor.getString(offset + 6), // distance
            cursor.getString(offset + 7), // type
            cursor.getString(offset + 8), // describe
            cursor.getString(offset + 9), // detail
            cursor.getString(offset + 10), // pic_url
            cursor.getString(offset + 11), // rank_hard
            cursor.getString(offset + 12), // rank_view
            cursor.getString(offset + 13) // rank_road
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Route entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRoute(cursor.getString(offset + 1));
        entity.setName(cursor.getString(offset + 2));
        entity.setDay(cursor.getString(offset + 3));
        entity.setStart(cursor.getString(offset + 4));
        entity.setEnd(cursor.getString(offset + 5));
        entity.setDistance(cursor.getString(offset + 6));
        entity.setType(cursor.getString(offset + 7));
        entity.setDescribe(cursor.getString(offset + 8));
        entity.setDetail(cursor.getString(offset + 9));
        entity.setPic_url(cursor.getString(offset + 10));
        entity.setRank_hard(cursor.getString(offset + 11));
        entity.setRank_view(cursor.getString(offset + 12));
        entity.setRank_road(cursor.getString(offset + 13));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Route entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Route entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
