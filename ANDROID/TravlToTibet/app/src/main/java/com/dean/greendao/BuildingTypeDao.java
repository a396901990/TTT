package com.dean.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.dean.greendao.BuildingType;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table BUILDING_TYPE.
*/
public class BuildingTypeDao extends AbstractDao<BuildingType, Long> {

    public static final String TABLENAME = "BUILDING_TYPE";

    /**
     * Properties of entity BuildingType.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TUNNEL = new Property(1, String.class, "TUNNEL", false, "TUNNEL");
        public final static Property VIEW = new Property(2, String.class, "VIEW", false, "VIEW");
        public final static Property TENT = new Property(3, String.class, "TENT", false, "TENT");
        public final static Property HOTEL = new Property(4, String.class, "HOTEL", false, "HOTEL");
        public final static Property STORE = new Property(5, String.class, "STORE", false, "STORE");
        public final static Property CHECKPOINT = new Property(6, String.class, "CHECKPOINT", false, "CHECKPOINT");
        public final static Property BRIDGE = new Property(7, String.class, "BRIDGE", false, "BRIDGE");
    };


    public BuildingTypeDao(DaoConfig config) {
        super(config);
    }
    
    public BuildingTypeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'BUILDING_TYPE' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'TUNNEL' TEXT NOT NULL ," + // 1: TUNNEL
                "'VIEW' TEXT NOT NULL ," + // 2: VIEW
                "'TENT' TEXT NOT NULL ," + // 3: TENT
                "'HOTEL' TEXT NOT NULL ," + // 4: HOTEL
                "'STORE' TEXT NOT NULL ," + // 5: STORE
                "'CHECKPOINT' TEXT NOT NULL ," + // 6: CHECKPOINT
                "'BRIDGE' TEXT NOT NULL );"); // 7: BRIDGE
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'BUILDING_TYPE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, BuildingType entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getTUNNEL());
        stmt.bindString(3, entity.getVIEW());
        stmt.bindString(4, entity.getTENT());
        stmt.bindString(5, entity.getHOTEL());
        stmt.bindString(6, entity.getSTORE());
        stmt.bindString(7, entity.getCHECKPOINT());
        stmt.bindString(8, entity.getBRIDGE());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public BuildingType readEntity(Cursor cursor, int offset) {
        BuildingType entity = new BuildingType( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // TUNNEL
            cursor.getString(offset + 2), // VIEW
            cursor.getString(offset + 3), // TENT
            cursor.getString(offset + 4), // HOTEL
            cursor.getString(offset + 5), // STORE
            cursor.getString(offset + 6), // CHECKPOINT
            cursor.getString(offset + 7) // BRIDGE
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, BuildingType entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTUNNEL(cursor.getString(offset + 1));
        entity.setVIEW(cursor.getString(offset + 2));
        entity.setTENT(cursor.getString(offset + 3));
        entity.setHOTEL(cursor.getString(offset + 4));
        entity.setSTORE(cursor.getString(offset + 5));
        entity.setCHECKPOINT(cursor.getString(offset + 6));
        entity.setBRIDGE(cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(BuildingType entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(BuildingType entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
