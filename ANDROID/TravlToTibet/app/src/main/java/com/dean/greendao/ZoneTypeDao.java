package com.dean.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.dean.greendao.ZoneType;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ZONE_TYPE.
*/
public class ZoneTypeDao extends AbstractDao<ZoneType, Long> {

    public static final String TABLENAME = "ZONE_TYPE";

    /**
     * Properties of entity ZoneType.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CITY = new Property(1, String.class, "CITY", false, "CITY");
        public final static Property COUNTY = new Property(2, String.class, "COUNTY", false, "COUNTY");
        public final static Property TOWN = new Property(3, String.class, "TOWN", false, "TOWN");
        public final static Property VILLAGE = new Property(4, String.class, "VILLAGE", false, "VILLAGE");
        public final static Property DAOBAN = new Property(5, String.class, "DAOBAN", false, "DAOBAN");
        public final static Property MOUNTAIN = new Property(6, String.class, "MOUNTAIN", false, "MOUNTAIN");
        public final static Property SCENICSPOT = new Property(7, String.class, "SCENICSPOT", false, "SCENICSPOT");
        public final static Property BUILDING = new Property(8, String.class, "BUILDING", false, "BUILDING");
        public final static Property OTHERS = new Property(9, String.class, "OTHERS", false, "OTHERS");
    };


    public ZoneTypeDao(DaoConfig config) {
        super(config);
    }
    
    public ZoneTypeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ZONE_TYPE' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'CITY' TEXT NOT NULL ," + // 1: CITY
                "'COUNTY' TEXT NOT NULL ," + // 2: COUNTY
                "'TOWN' TEXT NOT NULL ," + // 3: TOWN
                "'VILLAGE' TEXT NOT NULL ," + // 4: VILLAGE
                "'DAOBAN' TEXT NOT NULL ," + // 5: DAOBAN
                "'MOUNTAIN' TEXT NOT NULL ," + // 6: MOUNTAIN
                "'SCENICSPOT' TEXT NOT NULL ," + // 7: SCENICSPOT
                "'BUILDING' TEXT NOT NULL ," + // 8: BUILDING
                "'OTHERS' TEXT NOT NULL );"); // 9: OTHERS
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ZONE_TYPE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ZoneType entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getCITY());
        stmt.bindString(3, entity.getCOUNTY());
        stmt.bindString(4, entity.getTOWN());
        stmt.bindString(5, entity.getVILLAGE());
        stmt.bindString(6, entity.getDAOBAN());
        stmt.bindString(7, entity.getMOUNTAIN());
        stmt.bindString(8, entity.getSCENICSPOT());
        stmt.bindString(9, entity.getBUILDING());
        stmt.bindString(10, entity.getOTHERS());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ZoneType readEntity(Cursor cursor, int offset) {
        ZoneType entity = new ZoneType( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // CITY
            cursor.getString(offset + 2), // COUNTY
            cursor.getString(offset + 3), // TOWN
            cursor.getString(offset + 4), // VILLAGE
            cursor.getString(offset + 5), // DAOBAN
            cursor.getString(offset + 6), // MOUNTAIN
            cursor.getString(offset + 7), // SCENICSPOT
            cursor.getString(offset + 8), // BUILDING
            cursor.getString(offset + 9) // OTHERS
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ZoneType entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCITY(cursor.getString(offset + 1));
        entity.setCOUNTY(cursor.getString(offset + 2));
        entity.setTOWN(cursor.getString(offset + 3));
        entity.setVILLAGE(cursor.getString(offset + 4));
        entity.setDAOBAN(cursor.getString(offset + 5));
        entity.setMOUNTAIN(cursor.getString(offset + 6));
        entity.setSCENICSPOT(cursor.getString(offset + 7));
        entity.setBUILDING(cursor.getString(offset + 8));
        entity.setOTHERS(cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ZoneType entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ZoneType entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
