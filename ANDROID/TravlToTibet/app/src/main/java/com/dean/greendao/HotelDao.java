package com.dean.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.dean.greendao.Hotel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table HOTEL.
*/
public class HotelDao extends AbstractDao<Hotel, Long> {

    public static final String TABLENAME = "HOTEL";

    /**
     * Properties of entity Hotel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Route = new Property(1, String.class, "route", false, "ROUTE");
        public final static Property Hotel_belong = new Property(2, String.class, "hotel_belong", false, "HOTEL_BELONG");
        public final static Property Hotel_name = new Property(3, String.class, "hotel_name", false, "HOTEL_NAME");
        public final static Property Hotel_address = new Property(4, String.class, "hotel_address", false, "HOTEL_ADDRESS");
        public final static Property Hotel_tel = new Property(5, String.class, "hotel_tel", false, "HOTEL_TEL");
        public final static Property Hotel_detail = new Property(6, String.class, "hotel_detail", false, "HOTEL_DETAIL");
        public final static Property Hotel_pic = new Property(7, String.class, "hotel_pic", false, "HOTEL_PIC");
        public final static Property Hotel_type = new Property(8, String.class, "hotel_type", false, "HOTEL_TYPE");
    };


    public HotelDao(DaoConfig config) {
        super(config);
    }
    
    public HotelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'HOTEL' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'ROUTE' TEXT NOT NULL ," + // 1: route
                "'HOTEL_BELONG' TEXT NOT NULL ," + // 2: hotel_belong
                "'HOTEL_NAME' TEXT NOT NULL ," + // 3: hotel_name
                "'HOTEL_ADDRESS' TEXT," + // 4: hotel_address
                "'HOTEL_TEL' TEXT," + // 5: hotel_tel
                "'HOTEL_DETAIL' TEXT," + // 6: hotel_detail
                "'HOTEL_PIC' TEXT," + // 7: hotel_pic
                "'HOTEL_TYPE' TEXT);"); // 8: hotel_type
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'HOTEL'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Hotel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getRoute());
        stmt.bindString(3, entity.getHotel_belong());
        stmt.bindString(4, entity.getHotel_name());
 
        String hotel_address = entity.getHotel_address();
        if (hotel_address != null) {
            stmt.bindString(5, hotel_address);
        }
 
        String hotel_tel = entity.getHotel_tel();
        if (hotel_tel != null) {
            stmt.bindString(6, hotel_tel);
        }
 
        String hotel_detail = entity.getHotel_detail();
        if (hotel_detail != null) {
            stmt.bindString(7, hotel_detail);
        }
 
        String hotel_pic = entity.getHotel_pic();
        if (hotel_pic != null) {
            stmt.bindString(8, hotel_pic);
        }
 
        String hotel_type = entity.getHotel_type();
        if (hotel_type != null) {
            stmt.bindString(9, hotel_type);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Hotel readEntity(Cursor cursor, int offset) {
        Hotel entity = new Hotel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // route
            cursor.getString(offset + 2), // hotel_belong
            cursor.getString(offset + 3), // hotel_name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // hotel_address
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // hotel_tel
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // hotel_detail
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // hotel_pic
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // hotel_type
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Hotel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRoute(cursor.getString(offset + 1));
        entity.setHotel_belong(cursor.getString(offset + 2));
        entity.setHotel_name(cursor.getString(offset + 3));
        entity.setHotel_address(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setHotel_tel(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setHotel_detail(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setHotel_pic(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setHotel_type(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Hotel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Hotel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
